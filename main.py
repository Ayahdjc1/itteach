import logging
import sqlite3
import threading
import textwrap
import re
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import ollama

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
TOKEN = '7833956504:AAHCLP5vnewZX3icxE7aZ50vSkMdkKzdFcw'
MODEL_NAME = 'llama3'
TEMPERATURE = 0.6

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# --- SQLite (–æ–¥–∏–Ω –ø–æ—Ç–æ–∫, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è) ---
DB_LOCK = threading.Lock()
conn = sqlite3.connect("/home/bogdan/projects_2025/telegrammteach/prompts.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS prompts (
    user_id INTEGER PRIMARY KEY,
    prompt TEXT
)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS memory (
    user_id INTEGER,
    question TEXT,
    answer TEXT
)''')
conn.commit()

# --- –ü–†–û–§–ò–õ–ò, –í–û–ü–†–û–°–´, –ü–ê–ú–Ø–¢–¨ ---
student_profile = {}
dialog_memory = {}
MAX_HISTORY = 5

questions = [
    {"question": "–ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞ –≤ IT?", "options": ["–ù–∞—á–∏–Ω–∞—é—â–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"], "key": "–æ–ø—ã—Ç"},
    {"question": "–ö–∞–∫–æ–≤–∞ –≤–∞—à–∞ –º–æ—Ç–∏–≤–∞—Ü–∏—è?", "options": ["–ù–∏–∑–∫–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–í—ã—Å–æ–∫–∞—è"], "key": "–º–æ—Ç–∏–≤–∞—Ü–∏—è"},
    {"question": "–ö–∞–∫–æ–π —Å–ø–æ—Å–æ–± –ø–æ–¥–∞—á–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–∞–º —É–¥–æ–±–µ–Ω?", "options": ["–í–∏–∑—É–∞–ª—å–Ω—ã–π", "–¢–µ–∫—Å—Ç–æ–≤—ã–π", "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π"], "key": "—Å—Ç–∏–ª—å"},
    {"question": "–° –∫–∞–∫–∏–º–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏ —Å—Ç–∞–ª–∫–∏–≤–∞–µ—Ç–µ—Å—å?", "options": ["–î–µ—Ñ–∏—Ü–∏—Ç –≤–Ω–∏–º–∞–Ω–∏—è", "–ü–ª–æ—Ö–∞—è –ø–∞–º—è—Ç—å", "–ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è", "–ù–µ—Ç –ø—Ä–æ–±–ª–µ–º"], "key": "–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏"},
    {"question": "–ï—Å—Ç—å –ª–∏ –µ—â—ë —á—Ç–æ-—Ç–æ, —á—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–æ–æ–±—â–∏—Ç—å –æ —Å–µ–±–µ?", "options": [], "key": "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ"}
]
current_question = {}

@dp.message_handler(commands=['start'])
async def welcome_message(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(
        KeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"),
        KeyboardButton("–û–±—â–∞—Ç—å—Å—è —Å—Ä–∞–∑—É"),
        KeyboardButton("üìö –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥"),
        KeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥")
    )
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤ –∏–∑—É—á–µ–Ω–∏–∏ IT.\n\n"
        "–¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ–π—Ç–∏ –Ω–µ–±–æ–ª—å—à–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã —è –º–æ–≥ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–∏ —É—Ä–æ–∫–∏, –∏–ª–∏ —Å—Ä–∞–∑—É –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.",
        reply_markup=markup
    )

@dp.message_handler(lambda message: message.text == "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
async def start_test(message: types.Message):
    student_profile[message.from_user.id] = {}
    await send_question(message.from_user.id, 0)

@dp.message_handler(lambda message: message.text == "–û–±—â–∞—Ç—å—Å—è —Å—Ä–∞–∑—É")
async def start_chat_directly(message: types.Message):
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –ú–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.")

@dp.message_handler(lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–π –ø—Ä–æ–º—Ç")
async def show_prompt(message: types.Message):
    with DB_LOCK:
        cursor.execute("SELECT prompt FROM prompts WHERE user_id = ?", (message.from_user.id,))
        row = cursor.fetchone()

    if row:
        cleaned = clean_code_blocks(row[0])
        await message.answer(f"üìã –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –ø—Ä–æ–º—Ç:\n\n{cleaned}")
    else:
        await message.answer("‚ùå –ü—Ä–æ–º—Ç –ø–æ–∫–∞ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å.")

@dp.message_handler(lambda message: message.text == "üìö –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥")
async def show_dialog(message: types.Message):
    with DB_LOCK:
        cursor.execute("SELECT question, answer FROM memory WHERE user_id = ?", (message.from_user.id,))
        rows = cursor.fetchall()

    if not rows:
        await message.answer("–ü–∞–º—è—Ç—å –ø—É—Å—Ç–∞.")
        return

    dialog = "\n\n".join([f"üîπ {q}\nüí¨ {a}" for q, a in rows[-5:]])
    await message.answer(f"üß† –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n{dialog}")

@dp.message_handler(lambda message: message.text == "üßπ –û—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥")
async def clear_dialog(message: types.Message):
    dialog_memory.pop(message.from_user.id, None)
    with DB_LOCK:
        cursor.execute("DELETE FROM memory WHERE user_id = ?", (message.from_user.id,))
        conn.commit()
    await message.answer("üß† –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!")

@dp.message_handler()
async def handle_message(message: types.Message):
    user_id = message.from_user.id

    if len(message.text) > 1000:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    if user_id in current_question:
        q_index = current_question[user_id]
        question = questions[q_index]
        student_profile[user_id][question["key"]] = message.text

        if q_index + 1 < len(questions):
            await send_question(user_id, q_index + 1)
        else:
            del current_question[user_id]
            await message.answer("üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏...")

            profile = student_profile[user_id]
            system_prompt = await generate_prompt_from_profile(profile)

            with DB_LOCK:
                cursor.execute("REPLACE INTO prompts (user_id, prompt) VALUES (?, ?)", (user_id, system_prompt))
                conn.commit()

            markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            markup.add(
                KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–π –ø—Ä–æ–º—Ç"),
                KeyboardButton("–û–±—â–∞—Ç—å—Å—è —Å—Ä–∞–∑—É"),
                KeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"),
                KeyboardButton("üìö –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥"),
                KeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥")
            )
            await bot.send_message(user_id, "‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –£—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–∑–¥–∞–Ω—ã. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=markup)

    else:
        with DB_LOCK:
            cursor.execute("SELECT prompt FROM prompts WHERE user_id = ?", (user_id,))
            row = cursor.fetchone()

        base_prompt = row[0] if row else ""
        history = dialog_memory.get(user_id, [])
        history_text = "\n".join([f"–í–æ–ø—Ä–æ—Å: {q}\n–û—Ç–≤–µ—Ç: {a}" for q, a in history])
        full_prompt = f"{base_prompt}\n\n{history_text}\n–í–æ–ø—Ä–æ—Å: {message.text}\n–û—Ç–≤–µ—Ç:"

        response = ollama.generate(
            model=MODEL_NAME,
            prompt=full_prompt,
            options={'temperature': TEMPERATURE}
        )

        cleaned_response = clean_code_blocks(response['response'].strip())
        short_question = await summarize_text(message.text)
        short_answer = await summarize_text(cleaned_response)

        dialog_memory.setdefault(user_id, []).append((short_question, short_answer))
        dialog_memory[user_id] = dialog_memory[user_id][-MAX_HISTORY:]

        with DB_LOCK:
            cursor.execute("INSERT INTO memory (user_id, question, answer) VALUES (?, ?, ?)",
                           (user_id, short_question, short_answer))
            cursor.execute("DELETE FROM memory WHERE user_id = ? AND rowid NOT IN (SELECT rowid FROM memory WHERE user_id = ? ORDER BY rowid DESC LIMIT ?)",
                           (user_id, user_id, MAX_HISTORY))
            conn.commit()

        await bot.send_message(user_id, cleaned_response)

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
async def send_question(user_id, q_index):
    question = questions[q_index]
    current_question[user_id] = q_index
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    if question["options"]:
        for option in question["options"]:
            markup.add(KeyboardButton(option))
        await bot.send_message(user_id, question["question"], reply_markup=markup)
    else:
        await bot.send_message(user_id, question["question"])

def clean_code_blocks(text: str) -> str:
    def fix_block(match):
        code = match.group(1)
        dedented = textwrap.dedent(code)
        return f"```\n{dedented.strip()}\n```"
    return re.sub(r'```[a-zA-Z]*\n(.*?)```', fix_block, text, flags=re.DOTALL)

async def summarize_text(text: str) -> str:
    prompt = f"–°–æ–∫—Ä–∞—Ç–∏ –¥–æ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏, –≤ —á—ë–º —Å—É—Ç—å –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç–∞:\n{text}\n\n–°—É—Ç—å:"
    response = ollama.generate(
        model=MODEL_NAME,
        prompt=prompt,
        options={'temperature': 0.3}
    )
    return response['response'].strip()

async def generate_prompt_from_profile(profile):
    base_instruction = (
        f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π 2‚Äì3 –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–º—Ç–æ–≤ –∫ –µ–≥–æ –∑–∞–ø—Ä–æ—Å—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç. "
        f"–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º –±–µ–∑ –≤–≤–æ–¥–Ω—ã—Ö —Å–ª–æ–≤, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å.\n\n"
        f"–ü—Ä–æ—Ñ–∏–ª—å:\n"
        f"- –û–ø—ã—Ç: {profile.get('–æ–ø—ã—Ç')}\n"
        f"- –ú–æ—Ç–∏–≤–∞—Ü–∏—è: {profile.get('–º–æ—Ç–∏–≤–∞—Ü–∏—è')}\n"
        f"- –°—Ç–∏–ª—å: {profile.get('—Å—Ç–∏–ª—å')}\n"
        f"- –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {profile.get('–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏')}\n"
        f"- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {profile.get('–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ', '–Ω–µ—Ç')}"
    )

    response = ollama.generate(
        model=MODEL_NAME,
        prompt=base_instruction,
        options={'temperature': TEMPERATURE}
    )

    recommendations = response['response'].strip()
    return (
        "–¢—ã ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ø–æ IT. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –ª–∞–∫–æ–Ω–∏—á–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ. –ù–µ –ø–∏—à–∏ –ª–∏—à–Ω–µ–≥–æ.\n"
        f"–ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞:\n"
        f"- –û–ø—ã—Ç: {profile.get('–æ–ø—ã—Ç')}\n"
        f"- –ú–æ—Ç–∏–≤–∞—Ü–∏—è: {profile.get('–º–æ—Ç–∏–≤–∞—Ü–∏—è')}\n"
        f"- –°—Ç–∏–ª—å: {profile.get('—Å—Ç–∏–ª—å')}\n"
        f"- –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {profile.get('–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏')}\n"
        f"- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {profile.get('–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ', '–Ω–µ—Ç')}\n\n"
        f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n{recommendations}"
    )

# --- –ü–û–î–ì–†–£–ó–ö–ê –ü–ê–ú–Ø–¢–ò ---
with DB_LOCK:
    cursor.execute("SELECT user_id, question, answer FROM memory")
    for user_id, question, answer in cursor.fetchall():
        dialog_memory.setdefault(user_id, []).append((question, answer))

# --- –ó–ê–ü–£–°–ö ---
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

